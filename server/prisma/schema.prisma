// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String       @id @default(cuid())
  role       Role         @default(USER)
  firstName  String
  lastName   String
  age        Int
  email      String       @unique
  password   String
  comments   Comments[]
  likes      Like[]
  watchLater WatchLater[]
  avatarPath String?
  isPremium  Boolean      @default(false)
  Watched    Watched[]
  registredAt DateTime @default(now())
}

model Movie {
  id           String       @id @default(cuid())
  posterPath   String
  moviePath    String
  name         String
  description  String
  postedAt     DateTime     @default(now())
  genre        MovieGenre   @default(ACTION)
  likes        Like[]
  comments     Comments[]
  watchLater   WatchLater[]
  watched      Watched[]
  isForPremium Boolean      @default(false)
}

model WatchLater {
  id      String @id @default(cuid())
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String
  movie   Movie  @relation(fields: [movieId], references: [id], onDelete: Cascade)
  movieId String

  @@unique([userId, movieId])
}

model Like {
  id      String @id @default(cuid())
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String
  movie   Movie  @relation(fields: [movieId], references: [id], onDelete: Cascade)
  movieId String

  @@unique([userId, movieId])
}

model Comments {
  id        String   @id @default(cuid())
  posted_at DateTime @default(now())
  text      String
  Movie     Movie    @relation(fields: [movieId], references: [id], onDelete: Cascade)
  movieId   String
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  postedAt  DateTime @default(now())
}

model Watched {
  id        String   @id @default(cuid())
  watchedAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String? 
  ip        String?  
  movie     Movie    @relation(fields: [movieId], references: [id], onDelete: Cascade)
  movieId   String

  @@unique([userId, movieId])
  @@index([userId])
}

enum Role {
  USER
  ADMIN
}

enum MovieGenre {
  ACTION
  ADVENTURE
  ANIMATION
  COMEDY
  CRIME
  DRAMA
  FANTASY
  HORROR
  MYSTERY
  ROMANCE
  SCIENCE_FICTION
  THRILLER
  WESTERN
}
